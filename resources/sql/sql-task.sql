-- 1. Вывести к каждому самолету класс обслуживания и количество мест этого класса
SELECT model ->> 'ru' AS ru_model,
       fare_conditions,
       COUNT(seat_no)
FROM aircrafts_data
         LEFT JOIN seats USING (aircraft_code)
GROUP BY ru_model, fare_conditions
ORDER BY ru_model;

-- 2. Найти 3 самых вместительных самолета (модель + кол-во мест)
SELECT model ->> 'ru' AS ru_model,
       COUNT(seat_no) AS count_seats
FROM aircrafts_data
         LEFT JOIN seats USING (aircraft_code)
GROUP BY ru_model
ORDER BY count_seats DESC
LIMIT 3;

-- 3. Найти все рейсы, которые задерживались более 2 часов
SELECT flight_no AS delayed_flight
FROM flights
WHERE (actual_departure - scheduled_departure) > INTERVAL '2 hours';

-- 4. Найти последние 10 билетов, купленные в бизнес-классе (fare_conditions = 'Business'), с указанием имени пассажира и контактных данных
SELECT ticket_no,
       passenger_name,
       contact_data
FROM tickets
         JOIN ticket_flights USING (ticket_no)
         JOIN bookings USING (book_ref)
WHERE fare_conditions = 'Business'
ORDER BY book_date DESC
LIMIT 10;

-- 5. Найти все рейсы, у которых нет забронированных мест в бизнес-классе (fare_conditions = 'Business')
SELECT flight_id,
       flight_no,
       scheduled_departure
FROM flights
         LEFT JOIN ticket_flights USING (flight_id)
         LEFT JOIN tickets USING (ticket_no)
WHERE fare_conditions = 'Business'
GROUP BY flight_id, flight_no, scheduled_departure
HAVING COUNT(ticket_no) = 0;

-- 6. Получить список аэропортов (airport_name) и городов (city), в которых есть рейсы с задержкой по вылету
SELECT DISTINCT airport_name,
                city
FROM flights
         JOIN airports ON departure_airport = airport_code
WHERE actual_departure > scheduled_departure;
-- WHERE flights.status = 'Delayed'; или так?

-- 7. Получить список аэропортов (airport_name) и количество рейсов, вылетающих из каждого аэропорта, отсортированный по убыванию количества рейсов
SELECT airport_name ->> 'ru' AS ru_name,
       COUNT(flight_no)      AS count_flights
FROM airports_data
         LEFT JOIN flights ON airports_data.airport_code = flights.departure_airport
WHERE status IN ('Scheduled', 'On Time', 'Departed')
GROUP BY ru_name
ORDER BY count_flights DESC;

-- 8. Найти все рейсы, у которых запланированное время прибытия (scheduled_arrival) было изменено и новое время прибытия (actual_arrival) не совпадает с запланированным
SELECT flight_no,
       scheduled_arrival,
       actual_arrival
FROM flights
WHERE actual_arrival IS NOT NULL
  AND actual_arrival != scheduled_arrival;

-- 9. Вывести код, модель самолета и места не эконом класса для самолета "Аэробус A321-200" с сортировкой по местам
SELECT aircraft_code,
       model ->> 'ru' AS ru_model,
       seat_no
FROM aircrafts_data
         LEFT JOIN seats USING (aircraft_code)
WHERE fare_conditions != 'Economy'
  AND model ->> 'ru' = 'Аэробус A321-200'
ORDER BY seat_no;

-- 10. Вывести города, в которых больше 1 аэропорта (код аэропорта, аэропорт, город)
SELECT airport_code,
       airport_name ->> 'ru' AS ru_airport_name,
       city ->> 'ru'         AS ru_city_name
FROM airports_data
WHERE city ->> 'ru' IN (SELECT city ->> 'ru'
                        FROM airports_data
                        GROUP BY city ->> 'ru'
                        HAVING COUNT(airport_code) > 1);

-- 11. Найти пассажиров, у которых суммарная стоимость бронирований превышает среднюю сумму всех бронирований
SELECT ticket_no,
       passenger_name,
       SUM(total_amount) AS total_booking_amount
FROM tickets
         JOIN bookings USING (book_ref)
GROUP BY ticket_no, passenger_name
HAVING SUM(total_amount) > (SELECT AVG(total_amount) FROM bookings);

-- 12. Найти ближайший вылетающий рейс из Екатеринбурга в Москву, на который еще не завершилась регистрация
SELECT flight_no,
       scheduled_departure,
       status
FROM flights
WHERE departure_airport = 'SVX'
  AND arrival_airport = 'SVO'
  AND status IN ('On Time', 'Delayed')
ORDER BY scheduled_departure ASC
LIMIT 1;

-- 13. Вывести самый дешевый и дорогой билет и стоимость (в одном результирующем ответе)
SELECT MIN(amount) AS cheapest_amount,
       MAX(amount) AS most_expensive_amount
FROM ticket_flights;

-- 14. Написать DDL таблицы customers, должны быть поля id, first_name, last_name, email, phone. Добавить ограничения на поля (constraints)
CREATE TABLE customers
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    first_name VARCHAR(250)                            NOT NULL,
    last_name  VARCHAR(250)                            NOT NULL,
    email      VARCHAR(255) UNIQUE                     NOT NULL,
    phone      VARCHAR(15)                             NOT NULL CHECK (phone ~ '^[0-9+()-]+$')
);

-- 15. Написать DDL таблицы orders, должен быть id, customer_id, quantity. Должен быть внешний ключ на таблицу customers + constraints
CREATE TABLE orders
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    customer_id BIGINT                                  NOT NULL,
    quantity    INT                                     NOT NULL CHECK (quantity > 0),
    CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE CASCADE
);

-- 16. Написать 5 INSERT в эти таблицы
INSERT INTO customers (first_name, last_name, email, phone)
VALUES ('Luke', 'Skywalker', 'luke.skywalker@starwars.com', '+123456789'),
       ('Leia', 'Organa', 'leia.organa@starwars.com', '+987654321'),
       ('Han', 'Solo', 'han.solo@starwars.com', '+456789123'),
       ('Darth', 'Vader', 'darth.vader@starwars.com', '+321654987'),
       ('Obi-Wan', 'Kenobi', 'obiwan.kenobi@starwars.com', '+654789321');

INSERT INTO orders (customer_id, quantity)
VALUES (1, 3),
       (2, 1),
       (3, 5),
       (4, 2),
       (5, 4);

-- 17. Удалить таблицы
DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS customers;